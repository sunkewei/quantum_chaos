
//------------------------------------------------------------------------
// 简称: skwmain
// 名称: skwmain
// 类别: 公式应用
// 类型: 用户应用
// 输出: Void
//------------------------------------------------------------------------
Params
	
Vars
	Series<Numeric> skw_close;
	Numeric high_extreme_count ; 
	Numeric	low_extreme_count;
	Series<Numeric> on_extreme_raw(0);
	Series<Numeric> on_extreme(0);
	Series<Numeric> extreme_sign(0);
	Numeric last_extreme_low(0);
	Numeric last_extreme_high(0);
	Numeric last_extreme;
	Numeric last_extreme_low_index(0);
	Numeric last_extreme_high_index(0);
	Numeric nth_extreme_low_index(0);
	Numeric nth_extreme_high_index(0);
	Series<Numeric> extreme_average(0);
	Numeric extreme_average_low;
	Numeric extreme_average_high;
	Series<Numeric> extreme_factor(0);
	
	
	
	Series<Numeric> local_low_raw;
	Series<Numeric> local_high_raw;
	Series<Numeric> local_low;
	Series<Numeric> local_high;
	Series<Numeric> close_average;
	Series<Numeric> average_trend_raw;
	Series<Numeric> average_trend;
	Series<Numeric> average_trend_sign;
	Series<Numeric> stddev;
	Bool crossup190 ;
	Bool crossdown380 ;
	Bool crossdown_190 ;
	Bool crossup_380 ;
	
	Series<Numeric> trend_factor_raw;
	Series<Numeric> trend_factor;
	Series<Numeric> decision;
	Series<Numeric> general_signal(0);
	Series<Numeric> hl_length(1000);
	
	Numeric profit(0);
	

	Bool buy_entry_flag;
	Bool sell_entry_flag;
	Bool buy_exit_flag;
	Bool sell_exit_flag;
	Series<Numeric> holdings(0);
	Numeric units;
	Numeric stddev_base(5);
	Numeric stddev_now;
	Bool stdnormal(True);
	Series<Numeric> up_start_limit(201);
	Series<Numeric> up_end_limit(370);
	Series<Numeric> down_start_limit(-201);
	Series<Numeric> down_end_limit(-370);
	
	
	
	Numeric	extreme_trend_sign;
	
Defs
	//此处添加公式函数
	Numeric changed(Numeric newprice, Numeric old){
		return round((newprice-old)*100/old, 2);
		
	}
	
	Numeric getProperInterval(Numeric x)
	{
		
		return IntPart(x/BarInterval);
	}
	
	
	

Events
	OnInit()
	{	
		

	}
	//Bar更新事件函数，参数indexs表示变化的数据源图层ID数组
	OnBar(ArrayRef<Integer> indexs)
	{
		// initialize
		skw_close = Close;
		//skw_close = Average(Close, getProperInterval(2000));
		PlotNumeric("close",skw_close);
		units = intpart(30000/(Close*ContractUnit/10));
		general_signal = general_signal[1];
		if(MarketPosition == 0){
			general_signal = 0;
		}
		
		//extreme_sign
		
		last_extreme_low_index = Min(getProperInterval(30000),NthCon(on_extreme<0, 1));
		last_extreme_high_index = Min(getProperInterval(30000),NthCon(on_extreme>0, 1));
		nth_extreme_low_index = Min(getProperInterval(30000), NthCon(on_extreme<0, 2));
		nth_extreme_high_index = Min(getProperInterval(30000), NthCon(on_extreme>0, 2));
		last_extreme_low = skw_close[last_extreme_low_index];
		last_extreme_high = skw_close[last_extreme_high_index];
		on_extreme_raw = 0;
		
		if(Highest(skw_close, getProperInterval(240))==Highest(skw_close,getProperInterval(1200))){
			on_extreme_raw = 1;
		}
		if(Lowest(skw_close, getProperInterval(240))==Lowest(skw_close,getProperInterval(1200))){
			on_extreme_raw = -1;
		}

		high_extreme_count = CountIf(on_extreme>=1, getProperInterval(1200));
		low_extreme_count = CountIf(on_extreme<=-1, getProperInterval(1200));
		if(high_extreme_count>=1 or low_extreme_count>=1){
			on_extreme = 0;
		}else if(on_extreme_raw>0 and skw_close-skw_close[nth_extreme_high_index]<0){
			on_extreme = 0;
		}else if(on_extreme_raw<0 and skw_close-skw_close[nth_extreme_low_index]>0){
			on_extreme = 0;
		}else{
			on_extreme = on_extreme_raw;
		}
		extreme_factor=0;
		if(on_extreme==1){
			extreme_factor = 2;
		}Else If(on_extreme==-1){
			extreme_factor = -2;
		}Else{
			extreme_factor = extreme_factor[1];
			if(extreme_factor[1]>0 and Close<last_extreme_high){
				extreme_factor = Max(0,extreme_factor[1]-(1/getProperInterval(1800)));
			}
			if(extreme_factor[1]<0 and close>last_extreme_low){
				extreme_factor = Min(0,extreme_factor[1]+(1/getProperInterval(1800)));
			}
		}
		extreme_sign = extreme_factor;
		
		
		
		
		
		//average trend
		hl_length = getProperInterval(2000);
		stddev = Max(skw_close*0.01, StandardDev(skw_close,hl_length));
		close_average = Average(skw_close, hl_length);
		average_trend_raw = (skw_close - close_average)/stddev;
		if(Abs(average_trend_raw)<0.3){
			average_trend_raw = 0;
		}
		//average_trend_raw = Sign(average_trend_raw)*Exp(average_trend_raw)/getProperInterval(1800);
		//average_trend = Sign(average_trend[1] + average_trend_raw)*Min(Abs(average_trend[1] + average_trend_raw), 7);
		average_trend_sign = average_trend_sign[1]+ average_trend_raw;
		if(average_trend_sign>2){
			average_trend_sign = 2;
		}
		if(average_trend_sign<-2){
			average_trend_sign = -2;
		}
		
		
		//calculate crossover and crossunder
		
		
		
		
		
		
		
		
		
		
		trend_factor_raw = (average_trend_sign + extreme_sign)*100;
		
		trend_factor = trend_factor_raw;
		
		{
			
		if(trend_factor > 0){
					PlotBool("buy", True, Low);			
				}
				if(trend_factor < 0){
					PlotBool("sell", False, Low);
				}
		
		}
		crossup190 = CrossOver(trend_factor,up_start_limit);
		crossdown380 = CrossUnder(trend_factor,up_end_limit);
		crossdown_190 = CrossUnder(trend_factor,down_start_limit);
		crossup_380 = CrossOver(trend_factor,down_end_limit);		
		PlotString("accu", Text(round(trend_factor, 0)), high);
		
		buy_entry_flag = crossup190;
		buy_exit_flag = crossdown380 or trend_factor<0;
		sell_entry_flag = crossdown_190;
		sell_exit_flag = crossup_380 or trend_factor>0;
		if(MarketPosition!=0){
			profit = PercentChange(Close,BarsSinceEntry)*MarketPosition*100;
		}
		Print(text(profit));
		if( buy_entry_flag and MarketPosition==0){
			Buy(units, close);
			general_signal = 1;
		}
		if( buy_exit_flag and MarketPosition==1){
			Sell(0, close);
			general_signal=0;
		}
		if( sell_entry_flag and MarketPosition==0){
			SellShort(units, close);
			general_signal=-1;
		}
		if(	sell_exit_flag and MarketPosition==-1){
			BuyToCover(0, close);
			general_signal = 0;
		}
		
		
		
	}
		
	
	
	//持仓更新事件函数，参数pos表示更新的持仓结构体
	OnPosition(PositionRef pos)
	{
		
	}

	//策略账户仓更新事件函数，参数pos表示更新的账户仓结构体
	OnStrategyPosition(PositionRef pos)
	{
		
	}

	//委托更新事件函数，参数ord表示更新的委托结构体
	OnOrder(OrderRef ord)
	{
		
	}

	//成交更新事件函数，参数ordFill表示更新的成交结构体
	OnFill(FillRef ordFill)
	{
		
	}

	//定时器更新事件函数，参数id表示定时器的编号，millsecs表示定时间的间隔毫秒值
	OnTimer(Integer id,Integer intervalMillsecs)
	{
		
	}

	//通用事件触发函数，参数evtName为事件名称，参数evtValue为事件内容
	OnEvent(StringRef evtName,MapRef<String,String> evtValue) 
	{
		
	}

	//当前策略退出时触发
	OnExit()
	{

	}

	


//------------------------------------------------------------------------
// 编译版本	2020/07/09 133253
// 版权所有	timecompression
// 更改声明	TradeBlazer Software保留对TradeBlazer平台
//			每一版本的TradeBlazer公式修改和重写的权利
//------------------------------------------------------------------------

