
//------------------------------------------------------------------------
// 简称: skwmain
// 名称: skwmain
// 类别: 公式应用
// 类型: 用户应用
// 输出: Void
//------------------------------------------------------------------------
Params
	
Vars
	//此处添加变量
	Numeric thres(120);
	Numeric limit(9);
	
	Series<Numeric> skw_close;
	Series<Numeric> skw_close_raw;
	Series<Numeric> skw_close_refined;
	
	Series<Numeric> local_low;
	Series<Numeric> local_high;
	Numeric direction_low;
	Numeric direction_high;
	Numeric direction_diff;
	Numeric direction_diff_rate;
	Series<Numeric> direction_final;
	Series<Numeric> direction_final_sum;
	
	Series<Numeric> decision;
	
	
	Series<Numeric> direction_sign;
	Series<Numeric> con_sum;
	Series<Numeric> bound_high;
	Series<Numeric> bound_low;
	
	
	
	
	Numeric direction;
	Series<Numeric> direction_rate;
	
	
	Series<Numeric> skw_diff_long;
	Series<Numeric> skw_diff;
	Series<Numeric> position_sum;
	Series<Numeric> local_position_raw;
	Series<Numeric> local_position;
	Series<Numeric> general_signal(0);
	Series<Numeric> on_extreme(0);
	Series<Numeric> extreme_sign(0);
	Numeric i;
	Numeric percent_base;
	Numeric percent_factor;
	
	Bool pricecrossover;
	Bool pricecrossunder;
	
	
	Bool buy_entry_flag;
	Bool sell_entry_flag;
	
	Numeric trend_factor;
	
	

Defs
	//此处添加公式函数
	Numeric getLimitedValue(Numeric x,Numeric t_limit)
	{
		If(x>t_limit){
			return t_limit;
		}Else If(x<-t_limit){
			return -t_limit;
		}Else{
			return x;
		}
	}
	

Events
	//此处实现事件函数
	
	//初始化事件函数，策略运行期间，首先运行且只有一次，应用在订阅数据等操作
	OnInit()
	{	
		

	}

	//在所有的数据源准备完成后调用，应用在数据源的设置等操作
	OnReady()
	{
		
	}

	//在新bar的第一次执行之前调用一次，参数为新bar的图层数组
	OnBarOpen(ArrayRef<Integer> indexs)
	{

	}
	//Bar更新事件函数，参数indexs表示变化的数据源图层ID数组
	OnBar(ArrayRef<Integer> indexs)
	{
		percent_base = Average(summation(Abs(PercentChange(Close, 2)),60)/60, 10000)*10000;
		percent_factor = abs(PercentChange(Close, 2)*10000/percent_base);
		percent_factor = max(percent_factor/5,1);
		//calculate extreme_sign
		on_extreme = 0;
		if(Close==Highest(Close,4000/BarInterval)){
			on_extreme = 1;
		}
		if(Close==Lowest(Close,4000/BarInterval)){
			on_extreme = -1;
		}
		extreme_sign = sign(Summation(on_extreme, 2000));
		
		//calculate direction sign
		if (bound_high == 0 or bound_low==0){
			bound_high = Close;
			bound_low = Close;
		}
		direction_sign = 0;
		skw_close =  AdaptiveMovAvg(Close, 2000/BarInterval, 10/min(BarInterval, 5), 100/min(BarInterval,5));
		skw_close_refined = AdaptiveMovAvg(skw_close, 1000/BarInterval, 10/min(BarInterval, 5), 100/min(BarInterval,5));
		
		direction = sign(LinearRegSlope(skw_close_refined, 30/BarInterval))+sign(LinearRegSlope(skw_close_refined, 300/BarInterval));
		direction_final = abs(direction)*Sign(direction);
		direction_final_sum = Summation(direction_final, 1000/BarInterval)/2+Summation(direction_final, 500/BarInterval);
		direction_sign = 0;
		if(direction_final_sum > 500/BarInterval){
			direction_sign = 1;
		}
		if(direction_final_sum< -500/BarInterval){
			direction_sign = -1;
		}
		
		
		if(direction_sign > 0 and direction_sign[1]<=0 and con_sum[1]>2000/BarInterval and Close>= bound_high){
				direction_sign = 1;
				bound_low = Close*0.97;
				bound_high = Close*1.03;
		}Else if(direction_sign < 0 and direction_sign[1]>=0 and con_sum[1]> 2000/BarInterval and Close<= bound_low){
				direction_sign = -1;
				bound_low = Close*0.97;
				bound_high = Close*1.03;
		} else if(direction_sign*direction_sign[1]==1){
			bound_low = min(bound_low[1], Close);
			bound_high = max(bound_high[1], Close);
			con_sum = 0;
		}Else{
			direction_sign = 0;
			bound_low = bound_low[1];
			bound_high = bound_high[1];
			con_sum = con_sum[1]+1;
		}
		if(con_sum % (2000/BarInterval)==(1999/BarInterval-1)){
			bound_high = (Highest(Close, 2000/BarInterval) + Lowest(Close, 2000/BarInterval))/2*1.01;
			bound_low = (Highest(Close, 2000/BarInterval) + Lowest(Close, 2000/BarInterval))/2*0.99;
		}
		
		
		//calculate crossover and crossunder
		local_high = Average(Close, 2000/BarInterval) + StandardDev(Close,2000/BarInterval)*2;
		local_low = Average(Close, 2000/BarInterval) - StandardDev(Close,2000/BarInterval)*2;
		pricecrossover = CrossOver(Close,local_low);
		pricecrossunder = CrossUnder(Close,local_high);
		
		
		//calculate decision
		trend_factor = Sign(close-(local_high+local_low)/2) + Sign(local_high+local_low-local_high[1]-local_low[1]);
		if(trend_factor!=0){
			trend_factor = Sign(trend_factor);
		}
		decision = decision[1] + trend_factor*percent_factor/(1000/BarInterval);
		If(close>local_high){
				decision = decision[1] + percent_factor/(200/BarInterval);
			}Else If(close<local_low){
				decision = decision[1] - percent_factor/(200/BarInterval);
			}Else{
				decision = decision[1];
			}
			
		If(direction_sign==1){
			if(pricecrossover){
				decision = 1.8;
			}
		}Else If(direction_sign==-1){
			if(pricecrossunder){
				decision = -1.8;
			}
		}
		decision = Sign(decision) * Min(2, Abs(decision));
		
		PlotNumeric("skwclose", skw_close_refined,0, Yellow, 0);
		PlotNumeric("lhigh", local_high, 0,White,0);
		PlotNumeric("llow", local_low, 0,White,0);
		PlotNumeric("blow", bound_low, 0,Green,0);
		PlotNumeric("bhigh", bound_high, 0,Red,0);
		//PlotString("direction", Text(round(percent_factor,0)), High, Yellow);
		
		if(Abs(decision)>=2){
			decision = decision+extreme_sign;
			if(Abs(decision)>=3){
				decision = Sign(decision)*2;
			}Else{
				decision = Sign(decision)*1.95;
			}
		}
		
		
		
		
		general_signal = general_signal[1];
		buy_entry_flag = decision>=2 ;//and direction>5;	
		sell_entry_flag = decision<=-2;// and direction<-5;
		if( buy_entry_flag
			and MarketPosition==0){
			Buy(1, close);
			general_signal = 1;
		}
		if( decision<=0.1 
				and MarketPosition==1){
			Sell(1, close);
			general_signal=0;
		}
		if( sell_entry_flag
			and MarketPosition==0){
			SellShort(1, close);
			general_signal=-1;
		}
		if(	decision>=-0.1
			and MarketPosition==-1){
			BuyToCover(1, close);
			general_signal = 0;
		}
		
		
		if(general_signal == 1){
			PlotBool("buy", True, Low);
		}
		if(general_signal == -1){
			PlotBool("sell", False, Low);
		}
		
		
		//PlotNumeric("gsignal", general_signal, 0,White,0);
		
			
		//PlotString("direction", Text(on_extreme), High, Yellow);
		//PlotString("aaa", Text(direction_sign), Low, White);
		
	}
	
	//持仓更新事件函数，参数pos表示更新的持仓结构体
	OnPosition(PositionRef pos)
	{
		
	}

	//策略账户仓更新事件函数，参数pos表示更新的账户仓结构体
	OnStrategyPosition(PositionRef pos)
	{
		
	}

	//委托更新事件函数，参数ord表示更新的委托结构体
	OnOrder(OrderRef ord)
	{
		
	}

	//成交更新事件函数，参数ordFill表示更新的成交结构体
	OnFill(FillRef ordFill)
	{
		
	}

	//定时器更新事件函数，参数id表示定时器的编号，millsecs表示定时间的间隔毫秒值
	OnTimer(Integer id,Integer intervalMillsecs)
	{
		
	}

	//通用事件触发函数，参数evtName为事件名称，参数evtValue为事件内容
	OnEvent(StringRef evtName,MapRef<String,String> evtValue) 
	{
		
	}

	//当前策略退出时触发
	OnExit()
	{

	}

	


//------------------------------------------------------------------------
// 编译版本	2020/07/09 133253
// 版权所有	timecompression
// 更改声明	TradeBlazer Software保留对TradeBlazer平台
//			每一版本的TradeBlazer公式修改和重写的权利
//------------------------------------------------------------------------

